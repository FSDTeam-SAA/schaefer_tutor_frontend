datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  password String
  emailVerified DateTime?
  image String?
  phone String?
  profileImage String?
  role Role @default(student)
  accounts Account[]
  sessions Session[]
  Authenticator Authenticator[]

  // For teachers who have subjects
  subjects String[]

  // Relations for lessons
  teacherLessons Lesson[] @relation(name: "TeacherLessons")
  studentLessons Lesson[] @relation(name: "StudentLessons")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String @db.ObjectId
  studentId String @db.ObjectId
  subjectId String @db.ObjectId

  date DateTime
  time String
  status LessonStatus @default(planned)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships with explicit names
  teacher User @relation(name: "TeacherLessons", fields: [teacherId], references: [id], onDelete: Cascade)
  student User @relation(name: "StudentLessons", fields: [studentId], references: [id], onDelete: Cascade)
  subject Subject @relation(name: "SubjectLessons", fields: [subjectId], references: [id], onDelete: Cascade)

  @@index([teacherId])
  @@index([studentId])
  @@index([subjectId])
}


 enum Role {
  student
  teacher
  admin
} 

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Subject {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String


  // Relation with Lesson
  lessons Lesson[] @relation(name: "SubjectLessons")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}






enum LessonStatus {
  now
  canceled
  accepted
  planned
}

model Assignment {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  attachment    String?      // URL or file path for the attachment
  description   String?
  studentId      String @db.ObjectId
  teacherId String @db.ObjectId

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}